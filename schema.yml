openapi: 3.0.3
info:
  title: DRF Movie API
  version: 1.0.0
  description: Some description
paths:
  /api/v1/actors/:
    get:
      operationId: api_v1_actors_list
      description: Вывод списка актёров и режиссёров
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedActorDirectorListList'
          description: ''
  /api/v1/actors{format}:
    get:
      operationId: api_v1_actors_formatted_list
      description: Вывод списка актёров и режиссёров
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedActorDirectorListList'
          description: ''
  /api/v1/actors/{id}/:
    get:
      operationId: api_v1_actors_retrieve
      description: Вывод списка актёров и режиссёров
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorDirectorDetail'
          description: ''
  /api/v1/actors/{id}{format}:
    get:
      operationId: api_v1_actors_formatted_retrieve
      description: Вывод списка актёров и режиссёров
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorDirectorDetail'
          description: ''
  /api/v1/movies/:
    get:
      operationId: api_v1_movies_list
      description: Вывод списка фильмов
      parameters:
      - in: query
        name: genres
        schema:
          type: array
          items:
            type: string
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: years_max
        schema:
          type: string
      - in: query
        name: years_min
        schema:
          type: string
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMovieListList'
          description: ''
  /api/v1/movies{format}:
    get:
      operationId: api_v1_movies_formatted_list
      description: Вывод списка фильмов
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: genres
        schema:
          type: array
          items:
            type: string
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: years_max
        schema:
          type: string
      - in: query
        name: years_min
        schema:
          type: string
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMovieListList'
          description: ''
  /api/v1/movies/{id}/:
    get:
      operationId: api_v1_movies_retrieve
      description: Вывод списка фильмов
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDetail'
          description: ''
  /api/v1/movies/{id}{format}:
    get:
      operationId: api_v1_movies_formatted_retrieve
      description: Вывод списка фильмов
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDetail'
          description: ''
  /api/v1/ratings/:
    post:
      operationId: api_v1_ratings_create
      description: Добавление рейтинга к фильму
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRating'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateRating'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateRating'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRating'
          description: ''
  /api/v1/ratings{format}:
    post:
      operationId: api_v1_ratings_formatted_create
      description: Добавление рейтинга к фильму
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRating'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateRating'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateRating'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRating'
          description: ''
  /api/v1/reviews/:
    post:
      operationId: api_v1_reviews_create
      description: Добавление отзыва к фильму
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewCreate'
          description: ''
  /api/v1/reviews{format}:
    post:
      operationId: api_v1_reviews_formatted_create
      description: Добавление отзыва к фильму
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewCreate'
          description: ''
  /auth/jwt/create/:
    post:
      operationId: auth_jwt_create_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /auth/jwt/refresh/:
    post:
      operationId: auth_jwt_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /auth/jwt/verify/:
    post:
      operationId: auth_jwt_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /auth/token/login/:
    post:
      operationId: auth_token_login_create
      description: Use this endpoint to obtain user authentication token.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenCreate'
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenCreate'
          description: ''
  /auth/token/logout/:
    post:
      operationId: auth_token_logout_create
      description: Use this endpoint to logout user (remove user authentication token).
      tags:
      - auth
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /auth/users/:
    get:
      operationId: auth_users_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - auth
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: auth_users_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
  /auth/users/{id}/:
    get:
      operationId: auth_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: auth_users_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: auth_users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: auth_users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /auth/users/activation/:
    post:
      operationId: auth_users_activation_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Activation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Activation'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
          description: ''
  /auth/users/me/:
    get:
      operationId: auth_users_me_retrieve
      tags:
      - auth
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: auth_users_me_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: auth_users_me_partial_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: auth_users_me_destroy
      tags:
      - auth
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /auth/users/resend_activation/:
    post:
      operationId: auth_users_resend_activation_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_password/:
    post:
      operationId: auth_users_reset_password_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_password_confirm/:
    post:
      operationId: auth_users_reset_password_confirm_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
  /auth/users/reset_username/:
    post:
      operationId: auth_users_reset_username_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_username_confirm/:
    post:
      operationId: auth_users_reset_username_confirm_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameResetConfirm'
          description: ''
  /auth/users/set_password/:
    post:
      operationId: auth_users_set_password_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetPassword'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPassword'
          description: ''
  /auth/users/set_username/:
    post:
      operationId: auth_users_set_username_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUsername'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetUsername'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetUsername'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUsername'
          description: ''
components:
  schemas:
    Activation:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
      required:
      - token
      - uid
    ActorDirectorDetail:
      type: object
      description: Полное описание актёра или режиссёра
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Имя
          maxLength: 100
        age:
          type: integer
          maximum: 32767
          minimum: 0
          title: Возраст
        description:
          type: string
          title: Описание
        image:
          type: string
          format: uri
          title: Изображение
      required:
      - description
      - id
      - image
      - name
    ActorDirectorList:
      type: object
      description: Список актёров и режиссёров
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Имя
          maxLength: 100
        image:
          type: string
          format: uri
          title: Изображение
      required:
      - id
      - image
      - name
    CreateRating:
      type: object
      description: Добавление рейтинга к фильму
      properties:
        star:
          type: integer
          title: Звезда
        movie:
          type: integer
          title: Фильм
      required:
      - movie
      - star
    MovieDetail:
      type: object
      description: Полная информация о фильме
      properties:
        id:
          type: integer
          readOnly: true
        category:
          type: string
          readOnly: true
        directors:
          type: array
          items:
            $ref: '#/components/schemas/ActorDirectorList'
          readOnly: true
        actors:
          type: array
          items:
            $ref: '#/components/schemas/ActorDirectorList'
          readOnly: true
        genres:
          type: array
          items:
            type: string
          readOnly: true
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        title:
          type: string
          title: Название
          maxLength: 100
        tagline:
          type: string
          title: Слоган
          maxLength: 100
        description:
          type: string
          title: Описание
        poster:
          type: string
          format: uri
          title: Постер
        year:
          type: integer
          maximum: 32767
          minimum: 0
          title: Год выхода
        country:
          type: string
          title: Страна
          maxLength: 30
        world_premiere:
          type: string
          format: date
          title: Премьера в мире
        budget:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Бюджет
          description: Указывать сумму в долларах
        gross_usa:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Сборы в США
          description: Указывать сумму в долларах
        gross_worldwide:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Сборы в мире
          description: Указывать сумму в долларах
        url:
          type: string
          maxLength: 160
          pattern: ^[-a-zA-Z0-9_]+$
      required:
      - actors
      - category
      - country
      - description
      - directors
      - genres
      - id
      - poster
      - reviews
      - title
      - url
    MovieList:
      type: object
      description: Список фильмов
      properties:
        title:
          type: string
          title: Название
          maxLength: 100
        tagline:
          type: string
          title: Слоган
          maxLength: 100
        category:
          type: integer
          nullable: true
          title: Категория
        user_rating:
          type: boolean
        avg_rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,2})?$
      required:
      - avg_rating
      - title
      - user_rating
    PaginatedActorDirectorListList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/ActorDirectorList'
    PaginatedMovieListList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/MovieList'
    PaginatedUserList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PasswordResetConfirm:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
        new_password:
          type: string
      required:
      - new_password
      - token
      - uid
    PatchedUser:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
    Review:
      type: object
      description: Вывод отзывов
      properties:
        name:
          type: string
          title: Имя
          maxLength: 100
        text:
          type: string
          title: Сообщение
          maxLength: 5000
      required:
      - name
      - text
    ReviewCreate:
      type: object
      description: Добавление отзыва
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        name:
          type: string
          title: Имя
          maxLength: 100
        text:
          type: string
          title: Сообщение
          maxLength: 5000
        parent:
          type: integer
          nullable: true
          title: Родитель
        movie:
          type: integer
          title: Фильм
      required:
      - email
      - id
      - movie
      - name
      - text
    SendEmailReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    SetPassword:
      type: object
      properties:
        new_password:
          type: string
        current_password:
          type: string
      required:
      - current_password
      - new_password
    SetUsername:
      type: object
      properties:
        current_password:
          type: string
        new_username:
          type: string
          title: Username
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - current_password
      - new_username
    TokenCreate:
      type: object
      properties:
        password:
          type: string
        username:
          type: string
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    User:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
      required:
      - id
      - username
    UserCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        id:
          type: integer
          readOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - id
      - password
      - username
    UsernameResetConfirm:
      type: object
      properties:
        new_username:
          type: string
          title: Username
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - new_username
  securitySchemes:
    jwtAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "JWT"
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
